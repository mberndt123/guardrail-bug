/*
 * This file was generated by guardrail (https://github.com/guardrail-dev/guardrail).
 * Modifications will be overwritten; instead edit the OpenAPI/Swagger spec file.
 */
package swagger
import cats.syntax.either._
import io.circe.syntax._
import cats.instances.all._
import cats.data.EitherT
import cats.implicits._
import cats.effect.IO
import cats.effect.Async
import cats.effect.Sync
import org.http4s.{ Status => _, _ }
import org.http4s.client.{Client => Http4sClient}
import org.http4s.client.UnexpectedStatus
import org.http4s.dsl.io.Path
import org.http4s.multipart._
import org.http4s.headers._
import org.http4s.implicits._
import org.http4s.EntityEncoder._
import org.http4s.EntityDecoder._
import org.http4s.Media
import org.typelevel.ci.CIString
import fs2.Stream
import io.circe.Json
import scala.language.higherKinds
import scala.language.implicitConversions
import cats.implicits._
import cats.data.EitherT
import _root_.swagger.Implicits._
object Http4sImplicits {
  import scala.util.Try
  private[this] def pathEscape(s: String): String = Path.Segment(s).toString
  implicit def addShowablePath[T](implicit ev: Show[T]): AddPath[T] = AddPath.build[T](v => pathEscape(ev.show(v)))
  private[this] def argEscape(k: String, v: String): String = Query.apply((k, Some(v))).toString
  implicit def addShowableArg[T](implicit ev: Show[T]): AddArg[T] = AddArg.build[T](key => v => argEscape(key, ev.show(v)))
  type TraceBuilder[F[_]] = String => org.http4s.client.Client[F] => org.http4s.client.Client[F]
  implicit def emptyEntityEncoder[F[_]: Sync]: EntityEncoder[F, EntityBody[Nothing]] = EntityEncoder.emptyEncoder
  implicit def byteStreamEntityDecoder[F[_]: Sync]: EntityDecoder[F, Stream[F, Byte]] = new EntityDecoder[F, Stream[F, Byte]] {
    override def decode(m: Media[F], strict: Boolean): DecodeResult[F, Stream[F, Byte]] = DecodeResult.successT(m.body)
    override def consumes: Set[MediaRange] = Set(MediaRange.`*/*`)
  }
  object DoubleNumber { def unapply(value: String): Option[Double] = Try(value.toDouble).toOption }
  object BigDecimalNumber { def unapply(value: String): Option[BigDecimal] = Try(BigDecimal(value)).toOption }
  object BigIntNumber { def unapply(value: String): Option[BigInt] = Try(BigInt(value)).toOption }
}